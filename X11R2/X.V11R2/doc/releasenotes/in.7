.NH 1
The X Toolkit
.LP
A number of 
enhancements and bug fixes have made to the X Toolkit since the previous
release.  Most noticably, the Intrinsics and the sample widgets written
at MIT Project Athena have been separated into distinct libraries:  
\fIlibXt.a\fP (it is no longer called ``Xtk'') and \fIlibXaw.a\fP 
(short for ``X Athena Widgets''), respectively.  
.LP
The changes to the Intrinsics will require some modifications to both
widget code and applications.    The Intrinsics
documentation has been extensively reorganized and expanded, and should now
provide a good introduction to programming with the X Toolkit.  In addition,
a guide to using the sample widgets is now available.
.LP
The Intrinsics have been changed in the following ways:
.IP "default resources"
.br
\fIXtInitialize\fP now gets user preferences from the RESOURCE_MANAGER property
on the root window (see \fIxrdb(1)\fP), and only
reads the user's \fI\.Xdefaults\fP file if the property does not exist.
Any site-wide, application-specific defaults files in the directory
specified by the XAPPLOADDIR configuration parameter in
\fIutil/imake.includes/Imake.tmpl\fP (by default, 
\fI/usr/lib/X11/app-defaults\fP)
are loaded next.  Then, the resource file specified by the XENVIRONMENT 
environment variable, if set, is loaded.  Finally, any resources that are
specified on the application command line, using the ``-xrm'' option are
merged into the resource database.
.IP "callback list specification"
.br
Callback lists used to be specified with an opaque value but are now
specified by the resource name of the list within the widget.  The routines
\fIXtCreateWidget\fP, \fIXtSetValues\fP, and \fIXtGetValues\fP can now
have callbacks in their argument lists.  As a result, 
arguments to \fIXtAddCallback\fP, \fIXtCallCallback\fP, etc.
have changed accordingly.
.IP "callback list type change"
.br
All callback lists in widget resource lists must be identified with
representation type XtRCallback.
.IP "XtNfunction and XtNparameter now XtNcallback"
.br
The XtNfunction and XtNparameter callback resources for widgets with
callbacks have been merged into the single XtNcallback (or other
widget-specific) resource.
.IP "Checking for callbacks"
.br
Functions for determining whether or not a named callback list exists
or is empty have been added.
.IP "Input source and Timeout changes"
.br
Alternate input sources and timeouts now cause callbacks to occur rather than
events.  The arguments to \fIXtAddTimeOut\fP and \fIXtAddInput\fP have changed
accordingly.
.IP "error handler support"
.br
An application can now replace the default error handling routines
used by the Toolkit.
.IP "TopLevel replaced by TopLevelShell"
.br
The special TopLevel widget has been generalized into ShellWidgetClass.
Applications will typically use one of the standard sub-classes of
ShellWidgetClass; usually TopLevelShell.  The ShellWidget has additional
support for pop-ups, including pop-up and pop-down callbacks.
Communication with window managers has been improved.
.IP "multiple shells supported"
The undocumented interface for applications to create multiple top level
shell widgets has been modified and documented.
.IP "new parameter on XtAddGrab"
.br
XtAddGrab has an additional parameter for ``spring-loaded'' widgets.
.IP "pop-up widgets improved"
.br
Support for generalized pop-up widgets has been added.
.IP "new fields in CoreClass"
.br
Several new fields were added to CoreClassPart.  These will require
adjustments to all class initializers.  Some of the fields split
apart functions that were previously assigned to a single procedure
and some are entirely new.
.IP "class initialization changes"
.br
A \fIclass_part_initialize\fP procedure was added for one-time initialization
of subclass class records by the superclass.  The inheritance mechanism
has been simplified using this new field.  Also,
the class initialize procedure has been split into two separate procedures
and the arguments modified slightly.  Most widgets will need to provide only
an initialize procedure (if any).
.IP "set_values changes"
.br
The last-in-chain argument to the \fIset_values\fP procedure has been removed.
\fISet_values\fP procedures no longer need to make geometry requests; 
\fIXtSetValues\fP
will do so automatically.  A new procedure, \fIset_values_almost\fP, is defined
in case a widget class wants to handle a reply of XtGeometryAlmost.
.IP "XtSetValuesGeometryRequest change"
.br
XtSetValuesGeometryRequest has been removed.
.IP "changes to Constraint Class"
.br
The ConstraintClassPart record changed substantially in order to better
support constraint-based composite widgets.
.IP "changes to composite class"
.br
Extra arguments to the composite class \fIinsert_child\fP procedure have been
removed.  ConstraintWidgetClass gives equivalent functionality.
.IP "support for other languages"
.br
Several procedures that took arguments by value have been changed to
take them by reference to allow writing widgets in languages other
than C.  These changes include:  class \fIrealize\fP procedure \fIvalue_mask\fP
parameter, \fIXtArgsProc\fP \fInum_args\fP parameter (which 
affects only two new procedures; \fIinsert_child\fP no longer is of type 
XtArgsProc), and \fIAction\fP procedures (of type XtActionProc)
\fInum_params\fP parameter.
.IP "changes to exposure compression"
.br
The semantics of exposure compression have changed slightly.  If a widget
class asks for exposure compression, an Xlib region object will be
constructed for all the exposure events in a sequence and the expose
procedure will be called with the bounding box for the region and
the region itself.  Naive widgets will continue to ignore this information.
.IP "header file changes"
.br
The various header files have been reorganized.  \fIIntrinsic.h\fP should now
be included by applications, whereas \fIIntrinsicP.h\fP should be included by
widgets.  The standard widgets (Core, Composite, Constraint, and Shell) provide
corresponding public and private header files which were formerly part of 
\fIIntrinsic.h\fP.
.IP "Atoms.h renamed"
.br
The header file \fIAtoms.h\fP has been renamed to \fIStringDefs.h\fP and
obsolete entries have been removed.
.IP "changes to XtMakeGeometryRequest"
.br
\fIXtMakeGeometryRequest\fP
has changed its behavior when it receives a reply of
XtGeometryYes
from the geometry manager. Previously, it would only set the
window's size in this case. It now sets whatever pieces of the
window's configuration that have changed, that is, it will also
set the window's position and stacking order, if appropriate.
.IP "changes to translation management"
.br
Translation management has been substantially changed.
States have been removed.
Leaving modifiers off of the left hand side of a translation
production now means the production applies regardless of the state of those
modifiers.
The uncompiled form of a translation table is now of type String.
It is an ASCII string consisting of productions separated
by newlines (ASCII LF). 
XtNtranslations 
is now a resource in the core resource list.
It should not in general be included in the widget resource lists. 
Translation tables are now shared, by default, between widgets of the same
class.
Users can now specify widget translations as a single line in
their resource files.
The default translations for a widget are no longer specified in the
widget's resource list, but instead in the \fItm_table\fP field in 
CoreClassPart.
.IP "new pointer motion support"
.br
Support has been added for requesting pointer motion events only when a
button is down.
.IP "window manager support"
.br
To support the window manager, 
a new type of event handler has been added that does not cause a select
on the handled event. 
.IP "XtNameToClass change"
.br
The routine \fIXtNameToClass\fP has been removed.
.IP "new XtTranslateCoords"
.br
A new routine, \fIXtTranslateCoords\fP, has been added.
It translates an (x,y) pair from widget coordinates to root coordinates.
.IP "version number checking"
.br
The Intrinsics now have a version number that is checked against a version
number in the widget at run-time.
If a mismatch occurs, a warning is produced.
CoreClassPart contains a new field, named \fIversion\fP, 
that widget writers must set to the constant
XtVersion.
.IP "changes to child management"
.br
The semantics of \fIXtManageChild[ren]\fP and \fIXtUnmanageChild[ren]\fP
have been changed so that calling the parent's \fIchange_managed\fP procedure 
is delayed until realization time if the parent is not yet realized.
Similarly, geometry requests always return XtGeometryYes
when the parent is unrealized.
.IP "new XtCreateManagedWidget routine"
.br
A convenience routine, \fIXtCreateManagedWidget\fP, which calls
\fIXtCreateWidget\fP and \fIXtManageChild\fP on the result, now exists.
.IP "support for prefered size"
.br
A new interface for parents to query the preferred size of a child
has been added.  Composite widgets that do a layout in \fIchange_managed\fP
will need to use this interface, as there is no longer an opportunity
for the child to make a geometry request before the child is
realized.
.IP "new XtWindowToWidget routine"
.br
A new routine, \fIXtWindowToWidget\fP, has been added.
It translates a display/window pair to the corresponding widget.
.IP "hooks"
.br
Fields have been added to the widget core record to provide hook 
procedures for special argument processing on the chained operations 
initialize, set values, and get values. The procedures \fIXtSetSubvalues\fP
and \fIXtGetSubvalues\fP are now available for subclasses with 
non-widget resources.
.IP "new support for Enter/Leave event compression"
.br
A field, \fIcompress_enterleave\fP, has been added to the widget core class 
record to indicate whether
or not enter/leave events with no intervening events should be compressed. 
.IP "changes in representation conversion interface"
.br
The interface for representation conversions
has been changed.  In particular, representation
conversions have been moved from Xlib into the toolkit, and the parameter list
of a conversion procedure is different.  Only conversion procedures in
widgets that register their
own representation conversion procedures will be affected by this change.
.IP "new notation resource specification"
.br
The notation for specifying default resources (such as would be loaded into
the RESOURCE_MANAGER property using \fIxrdb(1)\fP) has been changed to
provide to provide better support for deep hierarchies
of widgets.  In general, to get the old behavior found in \fI\.Xdefaults\fP
files, users can globally
substitute ``*'' for ``.'' in all resource specifications (the ``*'' is a 
wildcard that matches any number of intervening names, whereas ``.'' indicates
a direct subresource; see the Xlib manual for details).
The new
behavior gives users more control over the scope of a specification and
removes several bugs that caused Toolkit-based applications to
use default specifications in ways the user had not intended.  
.IP "command line changes"
The standard command-line parsing has been cleaned up.  Some ambiguities
in command line option names have been removed.  Command line option
parsing now allows unique abbreviations (e.g. ``-display'' may be shortened
to ``-d'' if there are no other command line options beginning with ``d'').
A new standard command line option ``-xrm'' allows specification of
resources at run time and is very useful for setting resources that don't have
their own command line options.
