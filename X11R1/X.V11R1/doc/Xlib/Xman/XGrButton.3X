.na
.de FD
.LP
.KS
.TA 1.0i 3i
.ta 1.0i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de PN
.ie t \f(H\|\\$1\|\fR\\$2
.el \fI\|\\$1\|\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XGrabButton 3X 
.SH NAME
XGrabButton, XUngrabButton \- manipulate the pointer
.SH SYNTAX
.\" $Header: XGrabButton.f,v 11.10 87/09/02 13:35:35 mento Exp $
XGrabButton\^(\^\fIdisplay\fP, \fIbutton_grab\fP\^, \fImodifiers\fP\^, \fIgrab_window\fP\^, \fIowner_events\fP\^, \fIevent_mask\fP\^, 
.br
                \fIpointer_mode\fP\^, \fIkeyboard_mode\fP\^, \fIconfine_to\fP\^, \fIcursor\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      unsigned int \fIbutton_grab\fP\^;
.br
      unsigned int \fImodifiers\fP\^;
.br
      Window \fIgrab_window\fP\^;
.br
      Bool \fIowner_events\fP\^;
.br
      unsigned int \fIevent_mask\fP\^;	
.br
      int \fIpointer_mode\fP\^, \fIkeyboard_mode\fP\^;
.br
      Window \fIconfine_to\fP\^; 
.br
      Cursor \fIcursor\fP\^; 
.LP
.\" $Header: XUngrabBut.f,v 11.10 87/09/04 09:21:56 mento Exp $
XUngrabButton\^(\^\fIdisplay\fP, \fIbutton_ungrab\fP\^, \fImodifiers\fP\^, \fIungrab_window\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      unsigned int \fIbutton_ungrab\fP\^;
.br
      unsigned int \fImodifiers\fP\^;
.br
      Window \fIungrab_window\fP\^;
.SH ARGUMENTS
.\" $Header: button.a,v 11.5 87/09/02 13:38:47 mento Exp $
.IP \fIbutton_grab\fP 1i
Specifies the pointer button that is to be grabbed when the specified
modifier keys are down.
.\" $Header: button2.a,v 1.1 87/09/02 13:38:33 mento Exp $
.IP \fIbutton_ungrab\fP 1i
Specifies the pointer button that is to be released in combination with the
modifier keys.
.\" $Header: confineto.a,v 11.4 87/09/02 13:53:41 mento Exp $
.IP \fIconfine_to\fP 1i
Specifies the window to confine the pointer in or
.PN None  
if it is not to be confined.
.\" $Header: cursor_grab.a,v 1.1 87/09/02 13:56:22 mento Exp $
.IP \fIcursor\fP 1i
Specifies the cursor that is to be displayed during the grab. 
.\" $Header: display.a,v 11.8 87/09/03 11:02:24 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.\" $Header: pointermask.a,v 11.6 87/09/09 19:30:00 mento Exp $
.IP \fIevent_mask\fP 1i
Specifies which pointer events are reported to the client.
They can be the bitwise inclusive OR of these pointer event mask bits:
.PN ButtonPressMask ,
.PN ButtonReleaseMask ,
.PN EnterWindowMask ,
.PN LeaveWindowMask ,
.PN PointerMotionMask ,
.PN PointerMotionHintMask ,
.PN Button1MotionMask ,
.PN Button2MotionMask ,
.PN Button3MotionMask ,
.PN Button4MotionMask ,
.PN Button5MotionMask ,
.PN ButtonMotionMask ,
.PN KeyMapStateMask .
.IP \fIgrab_window\fP 1i
Specifies the window ID of the window you want to grab.
.\" $Header: keybdmode.a,v 11.3 87/05/29 12:37:42 jg Exp $
.IP \fIkeyboard_mode\fP 1i
Controls further processing of keyboard events.
You can pass one of these constants:
.PN GrabModeSync 
or
.PN GrabModeAsync .
.\" $Header: modifiers.a,v 11.4 87/07/31 04:57:33 mento Exp $
.IP \fImodifiers\fP 1i
Specifies the set of keymasks.
This mask is the bitwise inclusive OR of these keymask bits:
.PN ShiftMask ,
.PN LockMask ,
.PN ControlMask ,
.PN Mod1Mask ,
.PN Mod2Mask ,
.PN Mod3Mask ,
.PN Mod4Mask ,
.PN Mod5Mask.
.\" $Header: ownerevents2.a,v 1.1 87/09/02 13:46:06 mento Exp $
.IP \fIowner_events\fP 1i
Specifies if the pointer events are to be reported normally (pass
.PN True )
or with respect to the grab window if selected by the event mask (pass
.PN False ).
.\" $Header: pointermode.a,v 11.3 87/05/29 12:36:27 jg Exp $
.IP \fIpointer_mode\fP 1i
Controls further processing of pointer events.
You can pass one of these constants:
.PN GrabModeSync 
or
.PN GrabModeAsync .
.\" $Header: ungrab_win.a,v 1.3 87/09/04 09:21:16 mento Exp $
.IP \fIungrab_window\fP 1i
Specifies the window ID of the window you want to ungrab.
.SH DESCRIPTION
.\" $Header: XGrabButton.d,v 1.2 87/09/02 13:59:04 mento Exp $
The
.PN XGrabButton
function establishes a passive grab.
.ds fd .PN XGrabButton
The errors that can be generated by 
\*(fd
are
.PN BadWindow ,
.PN BadCursor ,
.PN BadAlloc ,
and
.PN BadValue .
.LP
.\" $Header: XUngrabBut.d,v 1.1 87/08/27 14:22:06 mento Exp $
The
.PN XUngrabButton
function releases the passive button/key combination on the specified window if
it was grabbed by this client.
.ds fd .PN XUngrabButton
The error that can be generated by
\*(fd 
is
.PN BadWindow .
.SH DIAGNOSTICS
.\" $Header: badaccess1.e,v 1.1 87/09/04 08:22:25 mento Exp $
.TP 1i
.PN BadAccess
A client attempted
to grab a key/button combination already grabbed by another client.
.\" $Header: badcursor.e,v 1.1 87/09/04 08:22:58 mento Exp $
.TP 1i
.PN BadCursor
A value for a Cursor argument does not name a defined Cursor.
.\" $Header: badvalue.e,v 1.1 87/09/04 08:23:19 mento Exp $
.TP 1i
.PN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.\" $Header: badwindow.e,v 1.1 87/09/04 08:23:20 mento Exp $
.TP 1i
.PN BadWindow
A value for a Window argument does not name a defined Window.
.SH "SEE ALSO"
XAllowEvents(3X),
XGrabPointer(3X),
XGrabKey(3X),
XGrabKeyboard(3X),
.br
\fIXlib \- C Language X Interface, Protocol Version 11\fP
