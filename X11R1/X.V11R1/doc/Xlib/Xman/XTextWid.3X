.na
.de FD
.LP
.KS
.TA 1.0i 3i
.ta 1.0i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de PN
.ie t \f(H\|\\$1\|\fR\\$2
.el \fI\|\\$1\|\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XTextWidth 3X 
.SH NAME
XTextWidth, XTextWidth16 \- compute text width
.SH SYNTAX
.\" $Header: XTextWidth.f,v 11.4 87/08/15 12:17:10 mento Exp $
int XTextWidth\^(\^\fIfont_struct\fP\^, \fIstring\fP, \fIcount\fP\^)
.br
      XFontStruct *\fIfont_struct\fP\^;
.br
      char *\fIstring\fP\^;
.br
      int \fIcount\fP\^;
.LP
.\" $Header: XTextWidth16.f,v 11.6 87/09/07 12:02:26 mento Exp $
int XTextWidth16\^(\^\fIfont_struct\fP\^, \fIstring\fP, \fIcount\fP\^)
.br
      XFontStruct *\fIfont_struct\fP\^;
.br
      XChar2b *\fIstring\fP\^;
.br
      int \fIcount\fP\^;
.SH ARGUMENTS
.IP \fIcount\fP 1i
Specifies the character count in the named string.
.\" $Header: ptr_width.a,v 1.1 87/09/02 09:20:10 mento Exp $
.IP \fIfont_struct\fP 1i
Specifies the font used for the width computation.
.\" $Header: string.a,v 11.3 87/04/15 12:24:39 jg Exp $
.IP \fIstring\fP 1i
Specifies the character string.
.SH DESCRIPTION
.\" $Header: XTextWidth.d,v 1.4 87/09/10 17:29:49 mento Exp $
The
.PN XTextWidth
and
.PN XTextWidth16
functions return the width of the specified strings, ignoring size bearings.
.SH "SEE ALSO"
XTextExtents(3X)
.br
\fIXlib \- C Language X Interface, Protocol Version 11\fP
