.na
.de FD
.LP
.KS
.TA 1.0i 3i
.ta 1.0i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de PN
.ie t \f(H\|\\$1\|\fR\\$2
.el \fI\|\\$1\|\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XRaiseWindow 3X 
.SH NAME
XRaiseWindow, XLowerWindow, XCirculateSubwindows, XCirculateSubwindowsUp, 
XCirculateSubwindowsDown, XRestackWindows \- change window stacking order
.SH SYNTAX
.\" $Header: XRaiseWindow.f,v 11.3 87/08/15 12:15:18 mento Exp $
XRaiseWindow\^(\^\fIdisplay\fP, \fIw\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.LP
.\" $Header: XLowerWindow.f,v 11.3 87/08/15 12:14:16 mento Exp $
XLowerWindow\^(\^\fIdisplay\fP, \fIw\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.LP
.\" $Header: XCircWindow.f,v 11.4 87/08/15 12:11:07 mento Exp $
XCirculateSubwindows\^(\^\fIdisplay\fP, \fIw\fP\^, \fIdirection\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.br
      int \fIdirection\fP\^;
.LP
.\" $Header: XCircWinUp.f,v 11.5 87/08/15 12:11:06 mento Exp $
XCirculateSubwindowsUp\^(\^\fIdisplay\fP, \fIw\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.LP
.\" $Header: XCircWinDn.f,v 11.5 87/08/15 12:11:05 mento Exp $
XCirculateSubwindowsDown\^(\^\fIdisplay\fP, \fIw\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.LP
.\" $Header: XRestackWins.f,v 11.3 87/08/15 12:15:32 mento Exp $
XRestackWindows\^(\^\fIdisplay\fP, \fIwindows\fP\^, \^\fInwindows\fP\^);
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIwindows\fP\^[];
.br
      int \fInwindows\fP\^;
.SH ARGUMENTS
.\" $Header: direction.a,v 11.3 87/06/12 07:06:11 jg Exp $
.IP \fIdirection\fP 1i
Specifies the direction (up or down) that you want to circulate
the window. 
You can pass one of these constants:
.PN RaiseLowest
or
.PN LowerHighest .
.\" $Header: display.a,v 11.8 87/09/03 11:02:24 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.\" $Header: nwindows.a,v 11.3 87/04/11 07:04:50 jg Exp $
.IP \fInwindows\fP 1i
Specifies the number of windows to be restacked.
.\" $Header: w.a,v 11.2 87/03/28 11:02:22 mento Exp $
.IP \fIw\fP 1i
Specifies the window ID.
.\" $Header: windows.a,v 11.3 87/09/10 13:14:03 mento Exp $
.IP \fIwindows\fP 1i
Specifies an array containing the windows to be restacked.
All the windows must have the same parent.
.SH DESCRIPTION
.\" $Header: XRaiseWindow.d,v 1.2 87/08/28 06:26:17 mento Exp $
The
.PN XRaiseWindow
function
raises the specified window to the top of the stack so that no sibling window
obscures it.
.ds fd .PN XRaiseWindow
The error that can be generated by
\*(fd 
is
.PN BadWindow .
.LP
.\" $Header: XLowerWindow.d,v 1.1 87/08/27 14:20:13 mento Exp $
The
.PN XLowerWindow
function lowers the specified window to the bottom of the stack
so that it does not obscure any sibling
windows.
.ds fd .PN XLowerWindow
The error that can be generated by
\*(fd 
is
.PN BadWindow .
.LP
.\" $Header: XCircWindow.d,v 1.2 87/08/28 06:29:09 mento Exp $
The
.PN XCirculateSubwindows
function circulates the specified subwindow in the specified direction:
.PN RaiseLowest
or
.PN LowerHighest .
.ds fd .PN XCirculateSubwindows
The errors that can be generated by 
\*(fd
are
.PN BadWindow
and
.PN BadValue .
.LP
.\" $Header: XCircWinUp.d,v 1.1 87/08/27 14:18:09 mento Exp $
The
.PN XCirculateSubwindowsUp
function raises the lowest mapped child of the specified window that
is partially
or completely
occluded by another child.
.ds fd .PN XCirculateSubwindowsUp
The error that can be generated by
\*(fd 
is
.PN BadWindow .
.LP
.\" $Header: XCircWinDn.d,v 1.1 87/08/27 14:18:08 mento Exp $
The
.PN XCirculateSubwindowsDown
function lowers the highest mapped child of the specified window that partially
or completely occludes another child.
.ds fd .PN XCirculateSubwindowsDown
The error that can be generated by
\*(fd 
is
.PN BadWindow .
.LP
.\" $Header: XRestackWins.d,v 1.2 87/09/01 09:36:05 mento Exp $
The
.PN XRestackWindows
function restacks the windows in the order specified,
from top to bottom.
The stacking order of the first window in the windows array will be unaffected,
but the other windows in the array will be stacked underneath the first window
in the order of the array.
The stacking order of the other windows is not affected.
.ds fd .PN XRestackWindows
The errors that can be generated by 
\*(fd
are
.PN BadWindow .
.SH DIAGNOSTICS
.\" $Header: badvalue.e,v 1.1 87/09/04 08:23:19 mento Exp $
.TP 1i
.PN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.\" $Header: badwindow.e,v 1.1 87/09/04 08:23:20 mento Exp $
.TP 1i
.PN BadWindow
A value for a Window argument does not name a defined Window.
.SH "SEE ALSO"
XChangeWindowAttributes(3X),
XConfigureWindow(3X),
XCreateWindow(3X),
XDestroyWindow(3X),
XMapWindow(3X),
XUnmapWindow(3X)
.br
\fIXlib \- C Language X Interface, Protocol Version 11\fP
