.na
.de FD
.LP
.KS
.TA 1.0i 3i
.ta 1.0i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de PN
.ie t \f(H\|\\$1\|\fR\\$2
.el \fI\|\\$1\|\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XChangeKeyboardMapping 3X 
.SH NAME
XChangeKeyboardMapping, XGetKeyboardMapping, XSetModifierMapping, XGetModifierMapping, 
XNewModifierMapping, XFreeModifierMapping \- manipulate keyboard encoding
.SH SYNTAX
XChangeKeyboardMapping(\^\fIdisplay\fP, \fIfirst_keycode\fP, \fIkeysyms_per_keycode\fP, \fIkeysyms\fP, \fInum_codes\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      int \fIfirst_keycode\fP\^;
.br
      int \fIkeysyms_per_keycode\fP\^;
.br
      KeySym *\fIkeysyms\fP\^;
.br
      int \fInum_codes\fP\^;
.LP
KeySym *XGetKeyboardMapping(\^\fIdisplay\fP, \fIfirst_keycode_wanted\fP, \fIkeycode_count\fP, 
.br
                            \fIkeysyms_per_keycode_return\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      KeyCode \fIfirst_keycode_wanted\fP\^;
.br
      int \fIkeycode_count\fP\^;
.br
      int *\fIkeysyms_per_keycode_return\fP\^;
.LP
int XSetModifierMapping(\^\fIdisplay\fP, \fImodmap\fP\^)
.br
        Display *\fIdisplay\fP\^;
.br
        XModifierKeymap *\fImodmap\fP\^;
.LP
XModifierKeymap *XGetModifierMapping(\^\fIdisplay\fP\^)
.br
      Display *\fIdisplay\fP\^;

.LP
XModifierKeymap XNewModifierMapping(\^\fImax_keys_per_mod\fP\^)
.br
        int \fImax_keys_per_mod\fP\^;
.LP
XFreeModifierMapping(\^\fImodmap\fP\^)
.br
        XModifierMapping *\fImodmap\fP;
.SH ARGUMENTS
.IP \fIkeycode_count\fP 1i
Specifies the number of keycodes that are to be returned.
.\" $Header: display.a,v 11.8 87/09/03 11:02:24 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.IP \fIfirst_keycode\fP 1i
Specifies the first keycode that is to be changed.
.IP \fIfirst_keycode_wanted\fP 1i
Specifies the first keycode that is to be returned.
.IP \fIkeysyms\fP 1i
Specifies a pointer to an array of keysyms.
.IP \fIkeysyms_per_keycode\fP 1i
Specifies the keysyms that are to be used.
.IP \fIkeysyms_per_keycode_return\fP 1i
Returns the number of keysyms per keycode.
.IP \fImax_keys_per_mod\fP 1i
Specifies the maximum number of keycodes assigned to any of the modifiers
in the map.
.IP \fInum_codes\fP 1i
Specifies the number of keycodes that are to be changed.
.SH DESCRIPTION
.\" $Header: XCKMap.d,v 1.3 87/09/04 21:05:50 mento Exp $
The
.PN XChangeKeyboardMapping
function, starting with first_keycode,
defines the symbols for the specified number of keycodes.
.ds fd .PN XChangeKeyboardMapping
The errors that can be generated by 
\*(fd
are
.PN BadAlloc 
and
.PN BadValue .
.LP
.\" $Header: XGetKeyMap.d,v 1.3 87/09/04 21:05:00 mento Exp $
The
.PN XGetKeyboardMapping
function, starting with first_keycode,
returns the symbols for the specified number of keycodes.
.ds fd .PN XGetKeyboardMapping
The error that can be generated by
\*(fd 
is
.PN BadValue .
.LP
.\" $Header: XSetModMap.d,v 1.1 87/08/27 14:21:29 mento Exp $
The
.PN XSetModifierMapping
function specifies the keycodes of the keys, if any, that are to be used as modifiers.
.ds fd .PN XSetModifierMapping
The errors that can be generated by 
\*(fd
are
.PN BadAlloc
and 
.PN BadValue .
.LP
.\" $Header: XGetModMap.d,v 1.2 87/08/31 09:18:44 mento Exp $
The
.PN XGetModifierMapping
function returns
a newly created
.PN XModifierKeymap
structure that contains the keys being used as modifiers.
.LP
.\" $Header: XNewModMap.d,v 1.1 87/08/27 14:20:23 mento Exp $
The
.PN XNewModifierMapping
function creates a
.PN XModifierKeymap
structure.
.LP
.\" $Header: XFreeModMap.d,v 1.1 87/08/27 14:19:16 mento Exp $
The
.PN XFreeModifierMapping
function destroys a
.PN XModifierKeymap
structure.
.SH DIAGNOSTICS
.\" $Header: badalloc.e,v 1.3 87/09/11 11:17:14 mento Exp $
.TP 1i
.PN BadAlloc
The server failed to allocate the requested resource or server memory.
.\" $Header: badvalue.e,v 1.1 87/09/04 08:23:19 mento Exp $
.TP 1i
.PN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.SH "SEE ALSO"
XSetPointerMapping(3X)
.br
\fIXlib \- C Language X Interface, Protocol Version 11\fP
