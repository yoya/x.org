/* $XConsortium: evalori.pi,v 5.2 94/04/17 20:47:05 rws Exp $ */

/*****************************************************************

Copyright (c) 1989, 1990, 1991,1990  X Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the X Consortium.

Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
and the X Consortium, not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## evalori.pi -
## Test matrix utilities peval_view_ori_matrix, peval_view_ori_matrix3
## Test using different 
##   view reference points: origin/non-origin, 
##   view up vectors: any values
##   view plane normals: any values
## The resulting matrix from the utility is compared to the matrix 
## from the same operation performed in the test code.

source macro.pi
tbegintest("evalori","eval orientation matrix utilities");

# SETUP: open phigs
i_open_phigs(NULL,PDEF_MEM_SIZE);

foreach @rx @ry @rz(
	0.0;0.0;0.0;
	-1.0;0.3;0.5;
	)
	foreach @ux @uy @uz (
		0.0;1.0;0.0;
		-0.2;0.5;0.1;
		)
	# INITIALIZE: view ref pt, view up vector 2D
	vrp = I_Ppoint(@rx,@ry);
	vup = I_Pvec(@ux,@uy);

	# OPERATION: peval_view_ori_matrix
	err = i_bogus_error();
	peval_view_ori_matrix(&vrp,&vup,&err,mtx1);
	im_ifneq(err,0,"ERROR: %d in peval_view_ori_matrix",err);

	# VERIFICATION: verify the resulting 2D mtx
	i_evalvieworientationmtx(vrp,vup,mtx2);
	status = i_compare_Pmatrix(mtx1,mtx2);
	if (status != 1)
	  	tvprintf(1,"vrp(%.2f,%.2f) vup(%.2f,%.2f)\n",@rx,@ry,@ux,@uy);
		tfprintf("failed: eval orientation matrix, mtx != expected\n",
			NULL);
	endif

	# testing peval_view_ori_matrix3

		foreach @nx @ny @nz(
			0.5; 0.3; 1.0;
			-0.8;0.5;-0.1;
			)

	# INITIALIZE: view ref pt, view plane normal, view up vector 3D
	vrp3 = I_Ppoint3(@rx,@ry,@rz);
	vpn3 = I_Pvec3(@nx,@ny,@nz);
	vup3 = I_Pvec3(@ux,@uy,@uz);

	# OPERATION: peval_view_ori_matrix3
	err = i_bogus_error();
	peval_view_ori_matrix3(&vrp3,&vpn3,&vup3,&err,mtx31);
	im_ifneq(err,0,"ERROR: %d in peval_view_ori_matrix3",err);

	# VERIFICATION: verify the resulting 3D mtx
	i_evalvieworientationmtx3(vrp3,vpn3,vup3,mtx32);
	status = i_compare_Pmatrix3(mtx31,mtx32);
	if (status != 1)
		tvprintf(1,"vrp(%f,%f,%f) vpn(%f,%f,%f) vup(%f,%f,%f)\n",
			@rx,@ry,@rz,@nx,@ny,@nz,@ux,@uy,@uz);
		tfprintf("failed: eval orientation matrix3, mtx != expected\n",
			NULL);
	endif
		end
	end
end
tendtest()
