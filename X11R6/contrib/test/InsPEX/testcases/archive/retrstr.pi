/* $XConsortium: retrstr.pi,v 5.3 94/04/17 20:47:41 hersh Exp $ */

/*****************************************************************

Copyright (c) 1989, 1990, 1991,1990  X Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the X Consortium.

Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
and the X Consortium, not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## retrstr.pi -
## Test retrieve structure operation with different conflict
## resolution flags: MAINTAIN,UPDATE,ABANDON
##
## Test in particular, that a structure in CSS remains intact
## after an unrelated retrieve operation.
##
## Note: a->b means str a executes str b, ae means struct a is empty,
##       a' means this str a has same name as str a, but different contents
##
## Verify the structure identifiers in CSS after retrieval, 
## and the contents of the retrieved structures 
##
## setup:
## 	in archive:  	0->1->2  3
##      in CSS:	2' 3'	
## operations: 
##	retrieve str 0&3
## expected results in CSS:
##	maintain:	0->1e  2'  3'	(1e means str1 is empty)
##	abandon:	2' 3'
##	update:		0->1e  2'  3  


source macro.pi
source armacro.pi


# flag: 	archive conflict resolution flag
# cssN: 	number of structure in CSS after the retrieve operation
# cssA-@cssD:	structure ids in CSS
# st0-st3:	structure state for str0-str3
# ct0-ct3:	element type of the first element of structure 

macro im_retrieve_strs_test(@flag,@flagstring,@cssN,@cssA,@cssB,@cssC,@cssD,
	@st0,@ct0,@st1,@ct1,@st2,@ct2,@st3,@ct3)


	# create archive file
	popen_ar_file(1,"archfile1");

	# set up strs in archive
	im_buildstr0();
	im_buildstr1();
	im_buildstr2();
	im_buildstr3();
	par_all_structs(1);
	pdel_all_structs();

	# set up strs in CSS
	im_buildstr2_();
	im_buildstr3_();

	# set retrieval conflict resolution flag
	pset_conf_res(PRES_UPD,@flag);

	# retrieve strs 
	pret_structs(1,&restrs);

	# verify ids in CSS 
	im_confirm_CSS_strids(@cssN,@cssA,@cssB,@cssC,@cssD,
		"failed: struct ids in CSS != expected after retrieving with %s\n",@flagstring);

	# verify the contents of the retrieved strs
	im_confirm_status_content(0,@st0,@ct0,@flagstring, 
		"failed: after retrieving strs with %s, ");
	im_confirm_status_content(1,@st1,@ct1,@flagstring, 
		"failed: after retrieving strs with %s, ");
	im_confirm_status_content(2,@st2,@ct2,@flagstring, 
		"failed: after retrieving strs with %s, ");
	im_confirm_status_content(3,@st3,@ct3,@flagstring, 
		"failed: after retrieving strs with %s, ");

	# delete all structures in CSS
	pdel_all_structs();

	# close and remove created archive file
	pclose_ar_file(1);
	unlink("archfile1");
endmacro

tbegintest("retrstr","retrieve structure with different conflict resolutions");

#INITIALIZE: archive str list and storage for inquired str ids
ia1 = IA_Pint(2,0,3);
restrs = I_Pint_list(2,ia1);

buf = malloc(256)
inqids = I_Pint_list(0,buf);

#SETUP: open phigs, remove existing error file and archive file
unlink("expected_error");
unlink("archfile1");
i_open_phigs("expected_error",PDEF_MEM_SIZE);

# remove existing archive file

im_retrieve_strs_test(
	PRES_MAINTAIN, "PRES_MAINTAIN", 4, 0, 1, 2, 3,
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_EXEC_STRUCT, 
	PSTRUCT_STATUS_EMPTY, NULL,
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_MARKER_TYPE, 
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_MARKER_TYPE);

im_retrieve_strs_test(
	PRES_ABANDON, "PRES_ABANDON", 2, 2, 3,NULL,NULL,
	PSTRUCT_STATUS_NON_EXISTENT, NULL, 
	PSTRUCT_STATUS_NON_EXISTENT, NULL,
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_MARKER_TYPE, 
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_MARKER_TYPE);

im_retrieve_strs_test(
	PRES_UPD, "PRES_UPD", 4, 0, 1, 2, 3,
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_EXEC_STRUCT, 
	PSTRUCT_STATUS_EMPTY, NULL,
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_MARKER_TYPE, 
	PSTRUCT_STATUS_NOT_EMPTY, PELEM_LABEL);

tendtest();

